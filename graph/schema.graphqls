type Query{
	ordersForRegion(
		region_id : Int
		order_type : ordertype = all
		type_id : Int
	) : [order]
	systemById(id : Int) : system
	stationById(id : Int) : station
}
enum ordertype {
	buy
	sell
	all
}
type order {
	duration : Int
	is_buy_order : Boolean
	issued : String
	location : station
	location_id: Int
	min_volume : Int
	order_id : Int!
	price : Float
	range : range
	system : system
	system_id: Int
	item_type : item_type
	type_id : Int
	volume_remain : Int
	volume_total : Int
}

type station{
	max_dockable_ship_volume : Float
	name : String
	office_rental_cost : Float
	owning_corporation : corporation
	position : position
	race: race
	reprocessing_efficiency : Float
	reprocessing_stations_take : Float
	services : [services]
	station_id : Int
	system : system
	station_type : item_type
}

type corporation{
	alliance : alliance
	ceo : character
	creator : character
	date_founded : String
	description : String
	faction : faction
	home_station : station
	member_count : Int
	name : String
	shares : Int
	tax_rate : Float
	ticker : String
	url : String
	war_eligible : Boolean
}

type alliance{
	creator_corporation : corporation
	creator : character
	date_founded : String
	executor_corporation : corporation
	faction : faction
	name : String
	ticker : String
}

type character{
	alliance : alliance
	ancestry : ancestry
	birthday : String
	bloodline : bloodline
	corporation : corporation
	description : String
	faction : faction
	gender : gender
	name : String
	race : race
	security_status : Float
	title : String
}

type ancestry{
	bloodline : bloodline
	description : String
	icon : icon
	id : Int
	name : String
	short_description : String
}

type bloodline{
	id : Int
	charisma : Int
	corporation : corporation
	description : String
	intelligence : Int
	memory : Int
	name : String
	perception : Int
	race : race
	ship_type : item_type
	willpower : Int
}

type race{
	alliance : alliance
	description : String
	name : String
	race_id : Int
}

type item_type{
	type_id : Int
	capacity : Float
	description : String
	dogma_attributes : [Dogma_attribute]
	dogma_effects : [dogma_effect]
	graphic : graphic
	group : group
	icon : icon
	market_group : market_group
	mass : Float
	name : String
	packaged_volume : Float
	portion_size : Int
	published : Boolean
	radius : Float
	volume : Float
}

type Dogma_attribute{
	attribute : dogma_attribute_detail
	value : Float
}

type dogma_attribute_detail{
	attribute_id : Int
	default_value : Float
	description : String
	display_name : String
	high_is_good : Boolean
	icon : icon
	name : String
	published : Boolean
	stackable : Boolean
	unit : unit
}

type icon{
	id : Int
}

type unit{
	id : Int
}

type dogma_effect{
	effect : dogma_effect_detail
	is_default : Boolean
}

type dogma_effect_detail{
	description : String
	disallow_auto_repeat : Boolean
	discharge_attribute : Dogma_attribute
	display_name : String
	duration_attribute : Dogma_attribute
	effect_category : Int
	effect_id : Int
	electronic_chance : Boolean
	falloff_attribute_id : Int
	icon : icon
	is_assistance : Boolean
	is_offensive : Boolean
	is_warp_safe : Boolean
	modifiers : [modifier]
	name : String
	post_expression : Int
	pre_expression : Int
	published : Boolean
	range_attribute_id : Int
	range_change : Boolean
	tracking_speed_attribute_id : Int
}

type modifier{
	domain : String
	effect_id : Int
	func : String
	modified_attribute_id : Int
	modifying_attribute_id : Int
	operator : Int
}

type graphic{
	collision_file : String
	graphic_file : String
	graphic_id : Int
	icon_folder : String
	sof_dna : String
	sof_faction_name : String
	sof_hull_name : String
	sof_race_name : String
}

type group{
	category : category
	group_id : Int
	name : String
	published : Boolean
	item_types : [item_type]
}

type category{
	category_id : Int
	category_groups : [group]
	name : String
	published : Boolean
}

type market_group{
	description : String
	id : Int
	name : String
	parent_group : group
	types : [item_type]
}

type faction{
	corporation : corporation
	description : String
	faction_id : Int
	is_unique : Boolean
	militia_corporation : corporation
	name : String
	size_factor : Float
	solar_system : system
	station_count : Int
	station_system_count : Int
}

type system{
	constellation : constellation
	name : String
	planets : [system_planet]
	position : position
	security_class : String
	star : star
	stargate_list : [stargate]
	station_list : [station]
	station_ids: [Int]
	system_id : Int
}

type constellation{
	constellation_id : Int
	name : String
	position : position
	region : region
	solar_systems : [system]
}

type position{
	x : Float
	y : Float
	z : Float
}

type region{
	constellation_list : [constellation]
	description : String
	name : String
	region_id : Int
}

type planet{
	name : String
	planet_id : Int
	position : position
	system : system
	item_type : item_type
}

type system_planet{
	asteroid_belts : [Asteroid_belt]
	moon_list : [moon]
	planet_properties : planet
}

type Asteroid_belt{
	name : String
	position : position
	system : system
}

type moon{
	moon_id : Int
	name : String
	position : position
	system : system
}

type star{
	age : Int
	luminosity : Float
	name : String
	radius : Int
	solar_system : system
	spectral_class : spectral_class
	star_id : Int
	temperature : Int
	item_type : item_type
}

enum spectral_class{
	K2_V
	K4_V
	G2_V
	G8_V
	M7_V
	K7_V
	M2_V
	K5_V
	M3_V
	G0_V
	G7_V
	G3_V
	F9_V
	G5_V
	F6_V
	K8_V
	K9_V
	K6_V
	G9_V
	G6_V
	G4_VI
	G4_V
	F8_V
	F2_V
	F1_V
	K3_V
	F0_VI
	G1_VI
	G0_VI
	K1_V
	M4_V
	M1_V
	M6_V
	M0_V
	K2_IV
	G2_VI
	K0_V
	K5_IV
	F5_VI
	G6_VI
	F6_VI
	F2_IV
	G3_VI
	M8_V
	F1_VI
	K1_IV
	F7_V
	G5_VI
	M5_V
	G7_VI
	F5_V
	F4_VI
	F8_VI
	K3_IV
	F4_IV
	F0_V
	G7_IV
	G8_VI
	F2_VI
	F4_V
	F7_VI
	F3_V
	G1_V
	G9_VI
	F3_IV
	F9_VI
	M9_V
	K0_IV
	F1_IV
	G4_IV
	F3_VI
	K4_IV
	G5_IV
	G3_IV
	G1_IV
	K7_IV
	G0_IV
	K6_IV
	K9_IV
	G2_IV
	F9_IV
	F0_IV
	K8_IV
	G8_IV
	F6_IV
	F5_IV
	A0
	A0IV
	A0IV2
}

type stargate{
	destination : stargateDestination
	name : String
	position : position
	stargate_id : Int
	system : system
	item_type : item_type
}

type stargateDestination{
	stargate : stargate
	system : system
}

enum gender{
	male
	female
}

enum services{
	bounty_missions
	assasination_missions
	courier_missions
	interbus
	reprocessing_plant
	refinery
	market
	black_market
	stock_exchange
	cloning
	surgery
	dna_therapy
	repair_facilities
	factory
	labratory
	gambling
	fitting
	paintshop
	news
	storage
	insurance
	docking
	office_rental
	jump_clone_facility
	loyalty_point_store
	navy_offices
	security_offices
}

enum range{
	station
	region
	solarsystem
	range_1
	range_2
	range_3
	range_4
	range_5
	range_10
	range_20
	range_30
	range_40
}

schema{
	query: Query
}